package com.capoax.kmmresources.core

import com.capoax.kmmresources.extensions.isMultiline

data class AndroidPlatformGenerator(
        private val packageDeclaration: String?,
        private val androidRPackage: String,
        override val generated: MutableMap<String, String> = mutableMapOf(),
        override var generatedActual: String = packageDeclaration?.let {
            """
${it}import ${androidRPackage}.R
import android.content.Context

var localizationContext: Context? = null


"""
                .trimIndent()
        } ?: "",
        private val useDefaultTranslationIfNotInitialized: Boolean

): PlatformGenerator {

    override fun generateLocalization(key: String, value: LocalizationValue, language: String) {
        if (generated[language] == null) {
            generated[language] = "<resources>\n\t<!-- Generated file. Do not edit this file directly. Please see README.md for instructions -->\n"
        }

        val replacementsMade = mutableListOf<String>()
        val stringValue = value.value
        var replaced = stringValue
        valueReplacements.forEach { (original, replacement) ->
            if (!replacementsMade.contains(replacement)) {
                val withReplaced = replaced.replace(original, replacement)
                if (withReplaced != replaced) {
                    replacementsMade.add(replacement)
                }
                replaced = withReplaced
            }
        }
        var generatedLanguage = generated[language]!!
        generatedLanguage += "\t<string name=\"${key}\">${replaced}</string>\n"
        generated[language] = generatedLanguage
    }

    override fun generateActual(function: String, path: List<String>, name: String, numberOfArguments: Int, defaultTranslation: String) {
        val id = id(path, name)
        val varArgs = (0 until numberOfArguments).map { ", value${it}" }.joinToString("")
        val stringDelimeter = getStringDelimeter(defaultTranslation)
        generatedActual += "actual fun ${function}: String = localizationContext?.getString(R.string.${id}${varArgs}) ?: $stringDelimeter$defaultTranslation$stringDelimeter\n"
    }

    private fun getStringDelimeter(defaultTranslation: String) = if (defaultTranslation.isMultiline()) "\"\"\"" else "\""

    override fun generateActualList(function: String, path: List<String>, name: String, values: List<Map<String, String>>, defaultLanguage: String) {
        val id = id(path, name)
        generatedActual += "actual fun ${function}: List<String> = listOf(\n"

        values.forEachIndexed { index, _ ->
            if (index > 0) {
                generatedActual += ",\n"
            }
            val defaultTranslation = values[index].getOrDefault(defaultLanguage, "")
            val stringDelimeter = getStringDelimeter(defaultTranslation)
            generatedActual += "  localizationContext?.getString(R.string.${id}${index}) ?: $stringDelimeter$defaultTranslation$stringDelimeter"
        }
        generatedActual += "\n)\n"
    }

    override fun generateActualObjectList(function: String, path: List<String>, name: String, defaultTranslation: String) {
        val id = (path + listOf("${name}.\$index") + listOf(function)).joinToString(".")
        val functionName = "${(path.map { it.capitalize() } + listOf(name.capitalize()) + listOf(function)).joinToString(".")}()"

        val stringDelimeter = getStringDelimeter(defaultTranslation)
        generatedActual +=
                """
                |actual fun ${functionName}: String {
                |   val context = localizationContext
                |   return context?.getString(context.resources.getIdentifier("${id}", "string", context.packageName)) ?: $stringDelimeter$defaultTranslation$stringDelimeter
                |}
                |
                """.trimMargin()
    }

    override fun finish() {
        generated.keys.forEach { lang ->
            var generatedLanguage = generated[lang]!!
            generatedLanguage += "</resources>\n"
            generated[lang] = generatedLanguage
        }
    }

    companion object {
        private fun id(path: List<String>, name: String): String =
                "${path.joinToString("_")}_${name}"

        val valueReplacements = mapOf(
            "\\u0026" to "&amp;",
            "&" to "&amp;",
            "\n" to "\\n",
            "%%" to "%",
            "'" to "\'"
        )
    }
}
