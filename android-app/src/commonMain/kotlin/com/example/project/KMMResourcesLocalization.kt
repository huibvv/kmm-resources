// Generated by KMM Resources
package com.example.project

class L {
  companion object {
    val exampleContent: ExampleContent = ExampleContent()
    val general: General = General()
    val greetings: Greetings = Greetings()
    val listofobjects: Listofobjects = Listofobjects()
    val unit: Unit = Unit()
  }
  data class ExampleContent(
    val pages: Pages = Pages()) {
    data class Pages(
      val page1: Page1 = Page1(),
      val page2: Page2 = Page2(),
      val page3: Page3 = Page3()) {
      class Page1 {
        operator fun get(key: String): String? = when(key) {
          "title" -> title()
          "body" -> body()
          else -> null
        }
      }
      class Page2 {
        operator fun get(key: String): String? = when(key) {
          "title" -> title()
          "body" -> body()
          else -> null
        }
      }
      data class Page3(
        val body: Body = Body()) {
        class Body {
        }
        operator fun get(key: String): String? = when(key) {
          "title" -> title()
          else -> null
        }
      }
    }
  }
  data class General(
    val button: Button = Button(),
    val error: Error = Error()) {
    class Button {
      operator fun get(key: String): String? = when(key) {
        "ok" -> ok()
        else -> null
      }
    }
    class Error {
      operator fun get(key: String): String? = when(key) {
        "invalidField" -> invalidField()
        "tryAgainLater" -> tryAgainLater()
        else -> null
      }
    }
    operator fun get(key: String): String? = when(key) {
      "yes" -> yes()
      "no" -> no()
      "iDontKnow" -> iDontKnow()
      "ampersand1" -> ampersand1()
      "ampersand2" -> ampersand2()
      "ampersand3" -> ampersand3()
      else -> null
    }
  }
  class Greetings {
    operator fun get(key: String): String? = when(key) {
      "hello" -> hello()
      else -> null
    }
  }
  data class Listofobjects(
    val categories: Categories = Categories()) {
    data class Categories(
      val samplecategory: Samplecategory = Samplecategory()) {
      data class Samplecategory(
        val content: List<Content> = listOf(Content(0), Content(1))
) {
        operator fun get(key: String): String? = when(key) {
          "detailedDescription" -> detailedDescription()
          else -> null
        }
        data class Content(val index: Int)
      }
    }
  }
  data class Unit(
    val power: Power = Power()) {
    class Power {
      operator fun get(key: String): String? = when(key) {
        "u3" -> u3()
        "u6" -> u6()
        "u9" -> u9()
        else -> null
      }
    }
    operator fun get(key: String): String? = when(key) {
      "gas" -> gas()
      else -> null
    }
  }
}


expect fun L.ExampleContent.Pages.Page1.body(): String
expect fun L.ExampleContent.Pages.Page1.title(): String
expect fun L.ExampleContent.Pages.Page2.body(): String
expect fun L.ExampleContent.Pages.Page2.title(): String
expect fun L.ExampleContent.Pages.Page3.Body.checkmarks(): List<String>
expect fun L.ExampleContent.Pages.Page3.title(): String
expect fun L.General.ampersand1(): String
expect fun L.General.ampersand2(): String
expect fun L.General.ampersand3(): String
expect fun L.General.basiclist(): List<String>
expect fun L.General.Button.ok(): String
expect fun L.General.Error.invalidField(): String
expect fun L.General.Error.tryAgainLater(): String
expect fun L.General.iDontKnow(): String
expect fun L.General.no(): String
expect fun L.General.withParams(value0: String, value1: String): String
expect fun L.General.yes(): String
expect fun L.Greetings.hello(): String
expect fun L.Listofobjects.Categories.Samplecategory.Content.body(): String
expect fun L.Listofobjects.Categories.Samplecategory.Content.title(): String
expect fun L.Listofobjects.Categories.Samplecategory.detailedDescription(): String
expect fun L.Unit.gas(): String
expect fun L.Unit.Power.u3(): String
expect fun L.Unit.Power.u6(): String
expect fun L.Unit.Power.u9(): String
