// Generated by KMM Resources
package com.example.project

class L {
  companion object {
    val boilerComfort: BoilerComfort = BoilerComfort()
    val breakdown: Breakdown = Breakdown()
    val general: General = General()
    val greetings: Greetings = Greetings()
    val unit: Unit = Unit()
  }
  data class BoilerComfort(
    val check: Check = Check(),
    val chooseSubscription: ChooseSubscription = ChooseSubscription(),
    val pages: Pages = Pages()) {
    class Check
    data class ChooseSubscription(
      val maintenanceInterval: MaintenanceInterval = MaintenanceInterval(),
      val materialCosts: MaterialCosts = MaterialCosts()) {
      class MaintenanceInterval
      class MaterialCosts
    }
    data class Pages(
      val asbestos: Asbestos = Asbestos(),
      val boilerAccessibile: BoilerAccessibile = BoilerAccessibile(),
      val boilerAge: BoilerAge = BoilerAge(),
      val boilerBrand: BoilerBrand = BoilerBrand(),
      val boilerType: BoilerType = BoilerType(),
      val hasOwnBoiler: HasOwnBoiler = HasOwnBoiler()) {
      data class Asbestos(
        val questions: Questions = Questions()) {
        data class Questions(
          val asbestos: Asbestos = Asbestos()) {
          data class Asbestos(
            val dialog: Dialog = Dialog(),
            val doubts: Doubts = Doubts()) {
            class Dialog
            data class Doubts(
              val dialog: Dialog = Dialog()) {
              class Dialog
            }
          }
        }
      }
      data class BoilerAccessibile(
        val questions: Questions = Questions()) {
        data class Questions(
          val ladder: Ladder = Ladder(),
          val space: Space = Space(),
          val strairwell: Strairwell = Strairwell()) {
          data class Ladder(
            val dialog: Dialog = Dialog()) {
            class Dialog
          }
          data class Space(
            val dialog: Dialog = Dialog()) {
            class Dialog
          }
          data class Strairwell(
            val dialog: Dialog = Dialog()) {
            class Dialog
          }
        }
      }
      data class BoilerAge(
        val questions: Questions = Questions()) {
        data class Questions(
          val boilerAge: BoilerAge = BoilerAge()) {
          data class BoilerAge(
            val answers: Answers = Answers()) {
            class Answers
          }
        }
      }
      data class BoilerBrand(
        val questions: Questions = Questions()) {
        data class Questions(
          val boilerBrand: BoilerBrand = BoilerBrand()) {
          data class BoilerBrand(
            val dialogs: Dialogs = Dialogs()) {
            data class Dialogs(
              val dontKnowBrand: DontKnowBrand = DontKnowBrand(),
              val notListed: NotListed = NotListed()) {
              class DontKnowBrand
              class NotListed
            }
          }
        }
      }
      data class BoilerType(
        val questions: Questions = Questions()) {
        data class Questions(
          val boilerType: BoilerType = BoilerType()) {
          data class BoilerType(
            val dialog: Dialog = Dialog()) {
            class Dialog
          }
        }
      }
      data class HasOwnBoiler(
        val questions: Questions = Questions()) {
        data class Questions(
          val hasBoiler: HasBoiler = HasBoiler(),
          val ownBoiler: OwnBoiler = OwnBoiler()) {
          data class HasBoiler(
            val dialog: Dialog = Dialog()) {
            class Dialog
          }
          data class OwnBoiler(
            val dialog: Dialog = Dialog()) {
            class Dialog
          }
        }
      }
    }
  }
  data class Breakdown(
    val categories: Categories = Categories()) {
    data class Categories(
      val standby: Standby = Standby()) {
      data class Standby(
        val content: List<Content> = listOf(Content(0), Content(1))
) {
        data class Content(val index: Int)
      }
    }
  }
  data class General(
    val button: Button = Button(),
    val error: Error = Error()) {
    class Button
    class Error
  }
  class Greetings
  data class Unit(
    val electricity: Electricity = Electricity()) {
    class Electricity
  }
}


expect fun L.BoilerComfort.Check.title(): String
expect fun L.BoilerComfort.ChooseSubscription.checkmarks(): List<String>
expect fun L.BoilerComfort.ChooseSubscription.MaintenanceInterval.header(): String
expect fun L.BoilerComfort.ChooseSubscription.MaterialCosts.header(): String
expect fun L.BoilerComfort.Pages.Asbestos.Questions.Asbestos.body(): String
expect fun L.BoilerComfort.Pages.Asbestos.Questions.Asbestos.Dialog.message(): String
expect fun L.BoilerComfort.Pages.Asbestos.Questions.Asbestos.Dialog.title(): String
expect fun L.BoilerComfort.Pages.Asbestos.Questions.Asbestos.Doubts.Dialog.message(): String
expect fun L.BoilerComfort.Pages.Asbestos.Questions.Asbestos.Doubts.Dialog.title(): String
expect fun L.BoilerComfort.Pages.Asbestos.Questions.Asbestos.Doubts.title(): String
expect fun L.BoilerComfort.Pages.Asbestos.Questions.Asbestos.title(): String
expect fun L.BoilerComfort.Pages.BoilerAccessibile.Questions.Ladder.Dialog.message(): String
expect fun L.BoilerComfort.Pages.BoilerAccessibile.Questions.Ladder.Dialog.title(): String
expect fun L.BoilerComfort.Pages.BoilerAccessibile.Questions.Ladder.title(): String
expect fun L.BoilerComfort.Pages.BoilerAccessibile.Questions.Space.Dialog.message(): String
expect fun L.BoilerComfort.Pages.BoilerAccessibile.Questions.Space.Dialog.title(): String
expect fun L.BoilerComfort.Pages.BoilerAccessibile.Questions.Space.title(): String
expect fun L.BoilerComfort.Pages.BoilerAccessibile.Questions.Strairwell.Dialog.message(): String
expect fun L.BoilerComfort.Pages.BoilerAccessibile.Questions.Strairwell.Dialog.title(): String
expect fun L.BoilerComfort.Pages.BoilerAccessibile.Questions.Strairwell.title(): String
expect fun L.BoilerComfort.Pages.BoilerAge.Questions.BoilerAge.Answers.olderThan10(): String
expect fun L.BoilerComfort.Pages.BoilerAge.Questions.BoilerAge.Answers.youngerThan10(): String
expect fun L.BoilerComfort.Pages.BoilerAge.Questions.BoilerAge.body(): String
expect fun L.BoilerComfort.Pages.BoilerAge.Questions.BoilerAge.title(): String
expect fun L.BoilerComfort.Pages.BoilerBrand.Questions.BoilerBrand.body(): String
expect fun L.BoilerComfort.Pages.BoilerBrand.Questions.BoilerBrand.Dialogs.DontKnowBrand.message(): String
expect fun L.BoilerComfort.Pages.BoilerBrand.Questions.BoilerBrand.Dialogs.DontKnowBrand.title(): String
expect fun L.BoilerComfort.Pages.BoilerBrand.Questions.BoilerBrand.Dialogs.NotListed.message(): String
expect fun L.BoilerComfort.Pages.BoilerBrand.Questions.BoilerBrand.Dialogs.NotListed.title(): String
expect fun L.BoilerComfort.Pages.BoilerBrand.Questions.BoilerBrand.title(): String
expect fun L.BoilerComfort.Pages.BoilerType.Questions.BoilerType.Dialog.message(): String
expect fun L.BoilerComfort.Pages.BoilerType.Questions.BoilerType.Dialog.title(): String
expect fun L.BoilerComfort.Pages.BoilerType.Questions.BoilerType.title(): String
expect fun L.BoilerComfort.Pages.HasOwnBoiler.body(): String
expect fun L.BoilerComfort.Pages.HasOwnBoiler.Questions.HasBoiler.Dialog.message(): String
expect fun L.BoilerComfort.Pages.HasOwnBoiler.Questions.HasBoiler.Dialog.title(): String
expect fun L.BoilerComfort.Pages.HasOwnBoiler.Questions.HasBoiler.title(): String
expect fun L.BoilerComfort.Pages.HasOwnBoiler.Questions.OwnBoiler.Dialog.message(): String
expect fun L.BoilerComfort.Pages.HasOwnBoiler.Questions.OwnBoiler.Dialog.title(): String
expect fun L.BoilerComfort.Pages.HasOwnBoiler.Questions.OwnBoiler.title(): String
expect fun L.Breakdown.Categories.Standby.Content.body(): String
expect fun L.Breakdown.Categories.Standby.Content.title(): String
expect fun L.Breakdown.Categories.Standby.detailedDescription(): String
expect fun L.General.ampersand1(): String
expect fun L.General.ampersand2(): String
expect fun L.General.ampersand3(): String
expect fun L.General.Button.ok(): String
expect fun L.General.Error.invalidField(): String
expect fun L.General.Error.tryAgainLater(): String
expect fun L.General.iDontKnow(): String
expect fun L.General.no(): String
expect fun L.General.withParams(value0: String, value1: String): String
expect fun L.General.yes(): String
expect fun L.Greetings.hello(): String
expect fun L.Unit.Electricity.u3(): String
expect fun L.Unit.Electricity.u6(): String
expect fun L.Unit.Electricity.u9(): String
expect fun L.Unit.gas(): String
